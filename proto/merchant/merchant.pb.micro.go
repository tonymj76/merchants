// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/merchant/merchant.proto

package merchant

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MerchantService service

func NewMerchantServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MerchantService service

type MerchantService interface {
	CreateMerchant(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error)
	UpdateMerchant(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*Response, error)
	GetMerchantByID(ctx context.Context, in *GetIdRequest, opts ...client.CallOption) (*Response, error)
	GetMerchants(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMerchantByID(ctx context.Context, in *GetIdRequest, opts ...client.CallOption) (*Response, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*UpdatePasswordResponse, error)
	//outlet methods
	CreateMerchantOutlet(ctx context.Context, in *OutletRequest, opts ...client.CallOption) (*Response, error)
	DeleteMerchantOutlet(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error)
	UpdateMerchantOutlet(ctx context.Context, in *UpdateOutletRequest, opts ...client.CallOption) (*Response, error)
	GetMerchantOutlets(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error)
	GetMerchantOutletByID(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error)
	//Terminal methods
	CreateMerchantTerminal(ctx context.Context, in *TerminalRequest, opts ...client.CallOption) (*Response, error)
	DeleteMerchantTerminal(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error)
	UpdateMerchantTerminal(ctx context.Context, in *UpdateTerminalRequest, opts ...client.CallOption) (*Response, error)
	GetMerchantTerminals(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error)
	GetMerchantTerminalByID(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error)
}

type merchantService struct {
	c    client.Client
	name string
}

func NewMerchantService(name string, c client.Client) MerchantService {
	return &merchantService{
		c:    c,
		name: name,
	}
}

func (c *merchantService) CreateMerchant(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.CreateMerchant", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) UpdateMerchant(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.UpdateMerchant", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchantByID(ctx context.Context, in *GetIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchantByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchants(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchants", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) DeleteMerchantByID(ctx context.Context, in *GetIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.DeleteMerchantByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*UpdatePasswordResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.UpdatePassword", in)
	out := new(UpdatePasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) CreateMerchantOutlet(ctx context.Context, in *OutletRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.CreateMerchantOutlet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) DeleteMerchantOutlet(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.DeleteMerchantOutlet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) UpdateMerchantOutlet(ctx context.Context, in *UpdateOutletRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.UpdateMerchantOutlet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchantOutlets(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchantOutlets", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchantOutletByID(ctx context.Context, in *GetOutletIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchantOutletByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) CreateMerchantTerminal(ctx context.Context, in *TerminalRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.CreateMerchantTerminal", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) DeleteMerchantTerminal(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.DeleteMerchantTerminal", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) UpdateMerchantTerminal(ctx context.Context, in *UpdateTerminalRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.UpdateMerchantTerminal", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchantTerminals(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchantTerminals", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetMerchantTerminalByID(ctx context.Context, in *GetTerminalIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetMerchantTerminalByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerchantService service

type MerchantServiceHandler interface {
	CreateMerchant(context.Context, *CreateRequest, *Response) error
	UpdateMerchant(context.Context, *UpdateRequest, *Response) error
	GetMerchantByID(context.Context, *GetIdRequest, *Response) error
	GetMerchants(context.Context, *Request, *Response) error
	DeleteMerchantByID(context.Context, *GetIdRequest, *Response) error
	UpdatePassword(context.Context, *UpdatePasswordRequest, *UpdatePasswordResponse) error
	//outlet methods
	CreateMerchantOutlet(context.Context, *OutletRequest, *Response) error
	DeleteMerchantOutlet(context.Context, *GetOutletIdRequest, *Response) error
	UpdateMerchantOutlet(context.Context, *UpdateOutletRequest, *Response) error
	GetMerchantOutlets(context.Context, *GetOutletIdRequest, *Response) error
	GetMerchantOutletByID(context.Context, *GetOutletIdRequest, *Response) error
	//Terminal methods
	CreateMerchantTerminal(context.Context, *TerminalRequest, *Response) error
	DeleteMerchantTerminal(context.Context, *GetTerminalIdRequest, *Response) error
	UpdateMerchantTerminal(context.Context, *UpdateTerminalRequest, *Response) error
	GetMerchantTerminals(context.Context, *GetTerminalIdRequest, *Response) error
	GetMerchantTerminalByID(context.Context, *GetTerminalIdRequest, *Response) error
}

func RegisterMerchantServiceHandler(s server.Server, hdlr MerchantServiceHandler, opts ...server.HandlerOption) error {
	type merchantService interface {
		CreateMerchant(ctx context.Context, in *CreateRequest, out *Response) error
		UpdateMerchant(ctx context.Context, in *UpdateRequest, out *Response) error
		GetMerchantByID(ctx context.Context, in *GetIdRequest, out *Response) error
		GetMerchants(ctx context.Context, in *Request, out *Response) error
		DeleteMerchantByID(ctx context.Context, in *GetIdRequest, out *Response) error
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *UpdatePasswordResponse) error
		CreateMerchantOutlet(ctx context.Context, in *OutletRequest, out *Response) error
		DeleteMerchantOutlet(ctx context.Context, in *GetOutletIdRequest, out *Response) error
		UpdateMerchantOutlet(ctx context.Context, in *UpdateOutletRequest, out *Response) error
		GetMerchantOutlets(ctx context.Context, in *GetOutletIdRequest, out *Response) error
		GetMerchantOutletByID(ctx context.Context, in *GetOutletIdRequest, out *Response) error
		CreateMerchantTerminal(ctx context.Context, in *TerminalRequest, out *Response) error
		DeleteMerchantTerminal(ctx context.Context, in *GetTerminalIdRequest, out *Response) error
		UpdateMerchantTerminal(ctx context.Context, in *UpdateTerminalRequest, out *Response) error
		GetMerchantTerminals(ctx context.Context, in *GetTerminalIdRequest, out *Response) error
		GetMerchantTerminalByID(ctx context.Context, in *GetTerminalIdRequest, out *Response) error
	}
	type MerchantService struct {
		merchantService
	}
	h := &merchantServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MerchantService{h}, opts...))
}

type merchantServiceHandler struct {
	MerchantServiceHandler
}

func (h *merchantServiceHandler) CreateMerchant(ctx context.Context, in *CreateRequest, out *Response) error {
	return h.MerchantServiceHandler.CreateMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) UpdateMerchant(ctx context.Context, in *UpdateRequest, out *Response) error {
	return h.MerchantServiceHandler.UpdateMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchantByID(ctx context.Context, in *GetIdRequest, out *Response) error {
	return h.MerchantServiceHandler.GetMerchantByID(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchants(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantServiceHandler.GetMerchants(ctx, in, out)
}

func (h *merchantServiceHandler) DeleteMerchantByID(ctx context.Context, in *GetIdRequest, out *Response) error {
	return h.MerchantServiceHandler.DeleteMerchantByID(ctx, in, out)
}

func (h *merchantServiceHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *UpdatePasswordResponse) error {
	return h.MerchantServiceHandler.UpdatePassword(ctx, in, out)
}

func (h *merchantServiceHandler) CreateMerchantOutlet(ctx context.Context, in *OutletRequest, out *Response) error {
	return h.MerchantServiceHandler.CreateMerchantOutlet(ctx, in, out)
}

func (h *merchantServiceHandler) DeleteMerchantOutlet(ctx context.Context, in *GetOutletIdRequest, out *Response) error {
	return h.MerchantServiceHandler.DeleteMerchantOutlet(ctx, in, out)
}

func (h *merchantServiceHandler) UpdateMerchantOutlet(ctx context.Context, in *UpdateOutletRequest, out *Response) error {
	return h.MerchantServiceHandler.UpdateMerchantOutlet(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchantOutlets(ctx context.Context, in *GetOutletIdRequest, out *Response) error {
	return h.MerchantServiceHandler.GetMerchantOutlets(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchantOutletByID(ctx context.Context, in *GetOutletIdRequest, out *Response) error {
	return h.MerchantServiceHandler.GetMerchantOutletByID(ctx, in, out)
}

func (h *merchantServiceHandler) CreateMerchantTerminal(ctx context.Context, in *TerminalRequest, out *Response) error {
	return h.MerchantServiceHandler.CreateMerchantTerminal(ctx, in, out)
}

func (h *merchantServiceHandler) DeleteMerchantTerminal(ctx context.Context, in *GetTerminalIdRequest, out *Response) error {
	return h.MerchantServiceHandler.DeleteMerchantTerminal(ctx, in, out)
}

func (h *merchantServiceHandler) UpdateMerchantTerminal(ctx context.Context, in *UpdateTerminalRequest, out *Response) error {
	return h.MerchantServiceHandler.UpdateMerchantTerminal(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchantTerminals(ctx context.Context, in *GetTerminalIdRequest, out *Response) error {
	return h.MerchantServiceHandler.GetMerchantTerminals(ctx, in, out)
}

func (h *merchantServiceHandler) GetMerchantTerminalByID(ctx context.Context, in *GetTerminalIdRequest, out *Response) error {
	return h.MerchantServiceHandler.GetMerchantTerminalByID(ctx, in, out)
}
